#!/bin/env perl
#
#  Convert Docbook files to POD
#


#  Pragma
#
use strict qw(vars);
use vars qw($VERSION $Debug);


#  External modules
#
use IO::File;
use Docbook2Pod;
use Docbook2Pod::Util;
use Docbook2Pod::Constant;;
use Getopt::Long;
use Pod::Usage;
use FindBin qw($RealBin $Script);
use Cwd qw(cwd);


#  Used for debugging only
#
use Data::Dumper;


#  Constants
#
use constant {

    #  Output to stdout
    #
    OUTFILE => '-'

};


#  Version Info, must be all one line for MakeMaker, CPAN.
#
$VERSION='0.001';


#  Run main routine
#
exit ${&main(\@ARGV) || die 'unknown error'};


#===================================================================================================

sub getopt {


    #  Parse options and dispatch to actual work routine below
    #
    my $argv_ar=shift();


    #  Defaul options
    #
    my %opt=(

        xmlsuffix       =>   $OPT_XMLSUFFIX,
        podsuffix       =>   $OPT_PODSUFFIX,

    );


    #  Get command line options
    #
    #Getopt::Long::Configure(qw(auto_help auto_version));
    GetOptions(
        \%opt,
        'help|?',
        'man',
        'version',
        'debug',
        'xsltproc_exe=s',
        'groff_exe=s',
        'rman_exe=s',
        'xlstproc_xsl=s',
        'outfile|o=s',
        'infile=s@',
        'recurse|r',
        'recursedir|d=s',
        'xmlsuffix|x=s',
        'podsuffix|p=s',
        'merge',
    ) || pod2usage(2);
    pod2usage(-verbose => 99, -sections => 'Synopsis|Options', -exitval => 1) if $opt{'help'};
    pod2usage(-verbose => 2) if $opt{'man'};
    $opt{'version'} && do {
        print "$Script version: $VERSION\n";
        exit 0
    };


    #  Get infile
    #
    unless (@{$opt{'infile'}}) {
        $opt{'infile'}=$argv_ar
    }
    
    
    #  Update Constants if needed
    #
    foreach my $constant (qw(
        xsltproc_exe
        xlstproc_xsl
        groff_exe
        rman_exe
    )) {
        ${uc($constant)}=$opt{$constant} if defined $opt{$constant};
    }
    foreach my $constant (qw(
        xmlsuffx
        podsuffix
    )) {
        ${'OPT_'.uc($constant)}=$opt{$constant} if defined $opt{$constant};
    }
    
    
    # Recursing ?
    #
    if (exists $opt{'recurse'} || $opt{'recursedir'}) {
        my $dn=$opt{'recursedir'} || cwd();
        my @fn;
        my $wanted_cr=sub {
            return unless -f (my $fn=$File::Find::name);
            push @fn, $fn if ($fn=~/\Q$opt{'xmlsuffix'}\E$/);
        };
        use File::Find;
        find($wanted_cr, $dn);
        @fn ||
            return err("no files with '%s' suffix found when recursing directory '$dn'", $opt{'xmlsuffix'});
        @ARGV=@fn;
    }


    #  Return option hash ref
    #
    debug('opt %s', Dumper(\%opt)) if ($Debug=$opt{'debug'});


    #  Done
    #
    return \%opt;

}


sub main {


    #  Get options
    #
    my $opt_hr=&getopt(shift());
    
    
    #  Get input files
    #
    my @in_fn=@{$opt_hr->{'infile'}};
    
    
    #  Prepare to slurp
    #
    local $/=undef;
    while (my $xml=<>) {
    
    
        #  Get the name of the docbook file we are currently slurping
        #
        my $in_fn=shift @in_fn;
        
        
        #  Extract POD from docbook
        #
        my $pod_sr=Docbook2Pod->docbook2pod_xml(\$xml);
        
        
        #  Where are we going to put it
        #
        my $out_fn=$opt_hr->{'outfile'};
        if ($out_fn=~/^\.(.*)$/ && ($in_fn ne '-')) {
        
            #  Output file option is something like '.foo' = add '.foo' to input file name
            #  and make that the output file name
            #
            my $suffix=$out_fn;
            $out_fn=$in_fn;
            
            #  As a nicety strip known suffix off input file before saving (e.g. text.xml becomes
            #  text.foo, not text.xml.foo
            #
            $out_fn=~s/\Q$opt_hr->{'xmlsuffix'}\E$//;
            $out_fn.=$suffix;
            
            
            #  Lastly if no input file just a suffix doesn't make sense so delete
            #
            $out_fn=undef unless $in_fn;
            
        }
        if ($out_fn) {
        
        
            #  If we have an output file now save it there
            #
            my $out_fh=IO::File->new($out_fn, O_WRONLY|O_TRUNC|O_CREAT) ||
                return err("unable to open output file '$out_fn' for write, $!");
            print $out_fh ${$pod_sr};
            $out_fh->close()
        }
        elsif ($opt_hr->{'merge'}) {
        
        
            #  Or we are merging it into an existing (presumably perl) file. Strip suffix from
            #  input file and look for identically named file (e.g. if input file is foo.pl.xml
            #  look for foo.pl)
            #
            $out_fn=$in_fn;
            $out_fn=~s/\Q$opt_hr->{'xmlsuffix'}\E$//;
            unless (-f $out_fn) {
                return err("can't merge into file '$out_fn', file does not exist");
            }
            Docbook2Pod->pod_replace($out_fn, $pod_sr);
        }
        else {
        

            #   None the above. Send to stdout
            #
            print ${$pod_sr};

        }    
    }
    
    
    #  All done
    #
    return \0;
    
}
__END__
=head1 Name

docbook2pod - convert Docbook XML files into POD text

=head1 B<Synopsis>

B<docbook2pod [OPTIONS] FILE|->

=head1 B<Options>

-h, -?, --help
Show brief help message.


=over 5


=item -m, --man




Show this manual page


=item -v, --version




Show the utility and module version


=item -d, --debug




Turn on debugging output


=item -o, --outfile




Output filename or output suffix to append if multiple input files


=item -r, --recurse




Recurse down current directory looking for files matching docbook
suffix and proccess


=item -d, --recursedir




Recurse down specified directory looking for files matching docbook
suffix and process


=item -m, --merge




Merge produced POD into source file with same name minus docbook
suffix. All existing POD will be stripped from the target file.


=item --xsltproc_exe




Location of xsltproc binary


=item --xsltproc_xsl




Location of xlstproc stylesheets for converting docbook to man
pages


=item --groff_exe




Location of the groff binary


=item --rman_exe




Location of the polyglot rman binary


=item --xmlsuffix




Suffix of docbook files. Defaults to .xml


=item --podsuffix




Suffix of pod files. Defaults to .pod

=back


=head1 B<Description>

The B<docbook2pod >command is a wrapper around the following pseudo-code
pipe

xlstproc | groff | rman

with appropriate options to convert a Docbook article into a Perl POD
file. It can optionally merge the resulting POD file into an existing
Perl document (e.g. .pl or .pm).

=head1 B<Notes>

The B<docbook2pod >command use the Docbook2Pod Perl module. The
Docbook2Pod Perl module assumes all binaries and stylesheets required
are installed on the system and in well-known locations.

If the Docbook2Pod module cannot fine the binaries or stylesheets
needed you can supply locations via the options.

=head1 B<Examples>

B<docbook2pod foo.xml>

Display the POD generated from the foo.xml docbook source .

B<docbook2pod -m foo.pl.xml>

=head1 B<Author>

Written by Andrew Speer, <andrew.speer@isolutions.com.au>

=head1 B<Copying>

This file is part of Docbook2Pod.

This software is copyright (c) 2015 by Andrew Speer
<andrew.speer@isolutions.com.au>.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

Full license text is available at:

<http://dev.perl.org/licenses/>
